from operator import attrgetter

import pandas as pd
import csv
import pydriller as py
import logging

logger = logging.getLogger('table_cve_logger')
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler('logTableCVE.txt',mode='w')
fh.setLevel(logging.DEBUG)
logger.addHandler(fh)


rc = pd.read_csv('RepositoryeCommit.csv', sep='|',
                 names=['CVE', 'summary', 'CWE', 'Published date', 'Last update', 'CVSS', 'Impact confidentiality',
                        'Impact integrity', 'Impact availability', 'Product name', 'Vendor name', 'Url_repository',
                        'Commit_id', 'Url_trackers'], skiprows=1)

why = pd.read_csv('Risultati/risWhy.csv', sep='|',names=['CVE', 'Product', 'BF', 'E', 'NF', 'R', 'WR-OD', 'WR-OW', 'WR-OM','WR-M', 'PS-OW', 'PS-OM', 'PS-OY', 'PS-M',
                'W-H', 'W-M', 'W-L', 'PT_E', 'PT_M', 'PT_NC'], skiprows=1)

def introducing_commit(repo, commitHash):
    modifications = {}
    introducingCommit = []


    for commit in repo.traverse_commits():
        gr = py.GitRepository(commit.project_path)
        if commit.hash == commitHash:
            introducing_commit = gr.get_commits_last_modified_lines(commit)

            for commit in introducing_commit:
                repo._single=commit
                #rp = py.RepositoryMining(repo, single=commit)

                commitObjects = repo.traverse_commits()

                for commitObject in commitObjects:

                    modifications[commitObject.hash] = commitObject.modifications

                    introducingCommit.append(commitObject)

    return (introducingCommit, modifications)


tableCVE = open("tableCVE.csv", "w", newline='')
writerCVE = csv.writer(tableCVE, delimiter="|")
writerCVE.writerow(
        ['CVE','Summary','CWE','repo','filesInvolveded','introductionCommit','introductionDate','introductionDev','multipleCommits','numberCommits','removalCommit', 'removalDate', 'removalDev'])
tableCVE.close()

with open("tableCVE.csv", "a", newline='') as cveCsv:
    writerCVE = csv.writer(cveCsv, delimiter="|")
    for index,rowWhy in why.iterrows():
        logger.info(index)
        cve=''
        repoPath=''
        summary=''
        cwe=''
        fixCommit=''
        for indexRc,rowRc in rc.iterrows():
            if rowWhy[0]==rowRc[0] and rowWhy[1]==rowRc[9]:
                logger.info('trovato')
                cve=rowWhy[0]
                repoPath=rowRc[11]
                summary=rowRc[1]
                cwe=rowRc[2]
                fixCommit=rowRc[12]
                break
        repo=py.RepositoryMining(repoPath)
        logger.info(fixCommit)
        logger.info(repoPath)
        introducing=introducing_commit(repo,fixCommit)
        oldest_commit = min(introducing[0], key=attrgetter('author_date'))
        introductionCommit=oldest_commit.hash
        introductionDate=oldest_commit.author_date
        introductionDev=oldest_commit.author.name
        if len(introducing[0])==1:
            multiplecommits='no'
        else:
            multiplecommits='yes'
        numberCommit=len(introducing[0])
        commits=py.RepositoryMining(repoPath,single=fixCommit).traverse_commits()
        fixCommitObject=commits.__next__()
        removalDate=fixCommitObject.author_date
        removalDev=fixCommitObject.author.name
        filesInvolved=len(fixCommitObject.modifications)
        writerCVE.writerow([cve,summary,cwe,repoPath,filesInvolved,introductionCommit,introductionDate,introductionDev,multiplecommits,numberCommit,fixCommit,removalDate,removalDev])

