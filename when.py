import logging
from operator import attrgetter

import pandas as pd
import pydriller as py
import csv
import threading
from statistics import *

logger = logging.getLogger('data_analysis_when_logger')
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler('logWhen.txt',mode='w')
fh.setLevel(logging.DEBUG)
logger.addHandler(fh)

df = pd.read_csv('RepositoryeCommit.csv', sep='|',
                 names=['CVE', 'summary', 'CWE', 'Published date', 'Last update', 'CVSS', 'Impact confidentiality',
                        'Impact integrity', 'Impact availability', 'Product name', 'Vendor name', 'Url_repository',
                        'Commit_id', 'Url_trackers'], skiprows=1)
dict = dict()



def introducingCommitFile(repo, commit, v):
    # logger.info(repo)
    # logger.info(commit)
    # logger.info(v)
    logger.info("Metodo introducing commit file")

    commits = py.RepositoryMining(repo, to_commit=commit).traverse_commits()
    # logger.info(len(list(commits)))
    for commit in commits:

        for m in commit.modifications:
            if m.filename == v.filename:
                logger.info("trovato commit")

                return commit


def when(modifications,repo,fixCommitModifications):
    numCommit = {}

    for k, v in modifications.items():
        for m in v:
            for modification in fixCommitModifications:
                if m.filename==modification.filename:

                    if (m.old_path != None):
                        ic = introducingCommitFile(repo, k, m)
                        logger.info("Commit trovato "+ic.hash)
                        if (ic != None):
                            commit = py.RepositoryMining(repo, from_commit=ic.hash,
                                                         to_commit=k).traverse_commits()
                            numCommit[m.filename] = len(list(commit))

    return numCommit


def introducing_commit(repo, commitHash):
    modifications = {}
    introducingCommit = []

    logger.info(commitHash)
    for commit in repo.traverse_commits():
        gr = py.GitRepository(commit.project_path)
        if commit.hash == commitHash:
            introducing_commit = gr.get_commits_last_modified_lines(commit)
            logger.info("Introducing commit "+ str(len(introducing_commit)))
            for commit in introducing_commit:
                repo._single=commit
                #rp = py.RepositoryMining(repo, single=commit)

                commitObjects = repo.traverse_commits()

                for commitObject in commitObjects:

                    modifications[commitObject.hash] = commitObject.modifications

                    introducingCommit.append(commitObject)

    return (introducingCommit, modifications)


whenFile = open("Risultati/risWhen.csv", "w", newline='')
writerWhen = csv.writer(whenFile, delimiter="|")
writerWhen.writerow(['CVE', 'Product', 'Min', 'Max', 'Mean', 'Median', 'Variance', ' Standard deviation'])
whenFile.close()

def getRisultati(start,end):

    for index,row in df[start:end].iterrows():
        logger.info("Riga " + str(index))
        try:
            repo = py.RepositoryMining(row[11])
            introducing = introducing_commit(repo, row[12])

            if len(introducing[0]) != 0:
                commits=py.RepositoryMining(row[11],single=row[12]).traverse_commits()
                modifications=commits.__next__().modifications

                result = when(introducing[1],row[11],modifications)
                if len(result)!=0:
                    whenFile = open("Risultati/risWhen.csv", "a", newline='')
                    writerWhen = csv.writer(whenFile, delimiter="|")
                    writerWhen.writerow([row[0],row[9],min(result.values()),max(result.values()),mean(result.values()),median(result.values()),pvariance(result.values()),pstdev(result.values())])
                    whenFile.close()
                    logger.info(row[0] + "|" + row[9] + "|" + str(min(result.values())) + "|" + str(max(result.values())) + "|" + str(
                    mean(result.values())) + "|" + str(median(result.values())) + "|" + str(
                    pvariance(result.values())) + "|" + str(pstdev(result.values())))
        except Exception as e:
            logger.exception(str(index))

threads1 = threading.Thread(target=getRisultati,args=(0,743))
threads2 = threading.Thread(target=getRisultati,args=(743,1486))
threads3 = threading.Thread(target=getRisultati,args=(1486,2229))
threads4 = threading.Thread(target=getRisultati,args=(2229,2972))
threads1.start()
threads2.start()
threads3.start()
threads4.start()
threads1.join()
threads2.join()
threads3.join()
threads4.join()
