import pandas as pd
import pydriller as py
import csv

df = pd.read_csv('RepositoryeCommit.csv', sep='|', names=['CVE', 'summary', 'CWE','Published date','Last update','CVSS','Impact confidentiality','Impact integrity','Impact availability','Product name','Vendor name','Url_repository','Commit_id','Url_trackers'],skiprows=1)


def introducing_commit(repo, commitHash):
    modifications = {}
    introducingCommit = []

    print(commitHash)
    for commit in py.RepositoryMining(repo).traverse_commits():
        gr = py.GitRepository(commit.project_path)
        if commit.hash == commitHash:
            introducing_commit = gr.get_commits_last_modified_lines(commit)
            print("Introducing commit ", len(introducing_commit))
            for commit in introducing_commit:

                rp = py.RepositoryMining(repo, single=commit)

                commitObjects = rp.traverse_commits()

                for commitObject in commitObjects:
                    modifications[commitObject.hash] = commitObject.modifications

                    introducingCommit.append(commitObject)

    return (introducingCommit, modifications)

with open("cleaningData.csv", "w", newline='') as cleaning:
    writer = csv.writer(cleaning, delimiter="|")
    writer.writerow(['CVE', 'summary', 'CWE', 'Published date', 'Last update', 'CVSS', 'Impact confidentiality','Impact integrity', 'Impact availability', 'Product name', 'Vendor name', 'Url_repository','Commit_id', 'Url_trackers'])
    for index,row in df.iterrows():
            print("Riga ",index)

            try:
                introducing = introducing_commit(row[11], row[12])
                if len(introducing)!=0:

                #if index == 0:
                     #writer.writerow(['CVE', 'summary', 'CWE', 'Published date', 'Last update', 'CVSS', 'Impact confidentiality','Impact integrity', 'Impact availability', 'Product name', 'Vendor name', 'Url_repository','Commit_id', 'Url_trackers'])
                    writer.writerow([row[0],row[1],row[2],row[3],row[4],row[5],row[6],row[7],row[8],row[9],row[10],row[11],row[12],row[13]])
            except Exception as e:
                    print(str(e))