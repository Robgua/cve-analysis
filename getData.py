from pymongo import MongoClient
import time
from multiprocessing import Process,Pool
import pandas as pd
import os
import threading
import multiprocessing
import csv




from Vulnerable_Cases import Vulnerable_Cases

NUM_WORKERS=4

def getAllCve():
    cves=[]
    client = MongoClient(host="localhost", port=27017, connect=False)
    db = client.cvedb
    cursor = db.cves.find({})
    #print(cursor[0])
    for cve in cursor:
        cves.append(cve)
    '''for i in range (0,1000):
        cves.append(cursor[i])'''
    print(len(cves))
    return cves

allData=[]
onlyRepository=[]
onlyTracker=[]
repositoryCommit=[]
repositoryTracker=[]
vulnerableCases=[]
onlyProduct=[]

#cv=[x for x in cves if x['id']=='CVE-2018-16050']
#print(cv)
def setProductAndVendor(cves):
    vulnerableCases=[]
    #print("PID: %s, Process Name: %s, Thread Name: %s" % (os.getpid(),multiprocessing.current_process().name,threading.current_thread().name))
    ''''#for cve in cves:'''
    #print(cves['id'])
    #print(cves)
    if 'cwe' not in cves:
        cwe = ""
    else:
        cwe = cves['cwe']
    if 'impact' not in cves:
        impact = ""
        confidentiality=""
        integrity=""
        availability=""
    else:
        impact = cves['impact']
        if 'confidentiality' not in impact:
            confidentiality = ""
        else:
            confidentiality = impact['confidentiality']
        if 'integrity' not in impact:
            integrity = ""
        else:
            integrity = impact['integrity']
        if 'availability' not in impact:
            availability = ""
        else:
            availability=impact['availability']
        #print(impact['confidentiality'])
    if 'cvss' not in cves:
        cvss = ""
    else:
        cvss = cves['cvss']
    summary = cves['summary'].replace('|', ';')
    if cves['vulnerable_configuration']!= "":
        for cpe in cves['vulnerable_configuration']:

            products=[x._product for x in vulnerableCases if x._cve == cves['id']]
            split = cpe.split(":")

            if len(split)>= 4:

                if (split[4] not in products) and (split[3]!="torvalds"):

                    vc = Vulnerable_Cases(cves['id'], split[4], split[3], "", "",summary,cwe,cves['Modified'],cves['Published'],confidentiality,integrity,availability,cvss)
                    vulnerableCases.append(vc)
                    #print("PID: %s, Process Name: %s, Thread Name: %s" % (os.getpid(), multiprocessing.current_process().name, threading.current_thread().name))
                    #print("Product "+vc._product)
    vcs = [x for x in vulnerableCases if x._cve == cves['id']]
    for reference in cves['references']:
        if reference.find("/github") != -1:
            #print("-----find github-----")
            split = reference.split("/")
            repository = split[0] + "/" + split[1] + "/" + split[2] + "/" + split[3] + "/" + split[4]
            if split[3]!="torvalds":
                vc = next((x for x in vcs if x._product == split[4]), None)

                if vc != None:
                    vc._repository = repository
                else:

                    vc = Vulnerable_Cases(cves['id'], split[4], split[3], repository, "", summary, cwe, cves['Modified'],
                                          cves['Published'], confidentiality,
                                          integrity, availability, cvss)
                    vulnerableCases.append(vc)
                    #print("PID: %s, Process Name: %s, Thread Name: %s" % (os.getpid(), multiprocessing.current_process().name, threading.current_thread().name))
                    #print("Product"+vc._product)
                if reference.find("commit") != -1:
                    vc._commit = split[6]
                    # print(vc._commit)
                    #print("Repo ")

        if reference.find("bug") != -1 or reference.find("tracker") != -1 or reference.find("issues") != -1:
            if (reference[-1].isdigit()):
                for vc in vcs:
                    vc._tracker.append(reference)
                   #print("Tracker "+vc.toString())

    return vulnerableCases



def getStatisticsData():
    vulnerableCasesComplete=[]
    for cve in vulnerableCases:

         for vc in cve:

            vulnerableCasesComplete.append(vc)
            if(vc._repository!="" and vc._commit!="" and len(vc._tracker)!=0):
                allData.append(vc)
            if(vc._repository!="" and vc._commit!="" and len(vc._tracker)==0):
                repositoryCommit.append(vc)
            if(vc._repository != "" and vc._commit == "" and len(vc._tracker) != 0):
                repositoryTracker.append(vc)
            if(vc._repository != "" and vc._commit == "" and len(vc._tracker) == 0):
                onlyRepository.append(vc)
            if(vc._repository == "" and vc._commit == "" and len(vc._tracker) != 0):
                onlyTracker.append(vc)
            if (vc._repository == "" and vc._commit == "" and len(vc._tracker) == 0):
                onlyProduct.append(vc)
    return vulnerableCasesComplete

def createCSV():
    '''listframe = pd.DataFrame(columns=['CVE', 'summary', 'CWE','Published date','Last update','CVSS','Impact confidentiality','Impact integrity','Impact availability','Product name','Vendor name','Url_repository','Commit_id','Url_trackers'])
    for i in range(len(vulnerableCases)):
        listframe.loc[i] = [vulnerableCases[i]._cve,vulnerableCases[i]._summary ,vulnerableCases[i]._cwe,vulnerableCases[i]._published.strftime('%Y-%M-%d'),vulnerableCases[i]._last_update.strftime('%Y-%M-%d'),str(vulnerableCases[i]._cvss),vulnerableCases[i]._confidentiality,vulnerableCases[i]._integrity,vulnerableCases[i]._availability,vulnerableCases[i]._product,vulnerableCases[i]._vendor,vulnerableCases[i]._repository,vulnerableCases[i]._commit,";".join(str(p) for p in vulnerableCases[i]._tracker)]

    listframe.to_csv('Data.csv',index=False,sep="|");'''
    with open("Data.csv","w",newline='') as csvFile:
        writer=csv.writer(csvFile,delimiter="|")
        writer.writerow(['CVE', 'summary', 'CWE','Published date','Last update','CVSS','Impact confidentiality','Impact integrity','Impact availability','Product name','Vendor name','Url_repository','Commit_id','Url_trackers'])
        for vc in vulnerableCases:
            writer.writerow([vc._cve,vc._summary ,vc._cwe,vc._published.strftime('%Y-%M-%d'),vc._last_update.strftime('%Y-%M-%d'),str(vc._cvss),vc._confidentiality,vc._integrity,vc._availability,vc._product,vc._vendor,vc._repository,vc._commit,";".join(str(p) for p in vc._tracker)])

def createProvaCSV():
    with open("RepositoryeCommit.csv","w",newline='') as csvFile:
        writer=csv.writer(csvFile,delimiter="|")
        writer.writerow(['CVE', 'summary', 'CWE','Published date','Last update','CVSS','Impact confidentiality','Impact integrity','Impact availability','Product name','Vendor name','Url_repository','Commit_id','Url_trackers'])
        for vc in repositoryCommit:
            writer.writerow([vc._cve,vc._summary ,vc._cwe,vc._published.strftime('%Y-%M-%d'),vc._last_update.strftime('%Y-%M-%d'),str(vc._cvss),vc._confidentiality,vc._integrity,vc._availability,vc._product,vc._vendor,vc._repository,vc._commit,";".join(str(p) for p in vc._tracker)])
        for vc in allData:
            writer.writerow([vc._cve, vc._summary, vc._cwe, vc._published.strftime('%Y-%M-%d'),
                             vc._last_update.strftime('%Y-%M-%d'), str(vc._cvss), vc._confidentiality, vc._integrity,
                             vc._availability, vc._product, vc._vendor, vc._repository, vc._commit,
                             ";".join(str(p) for p in vc._tracker)])


if __name__ == '__main__':
    cves = getAllCve()

    start_time=time.time()
    p=Pool(4)

    vulnerableCases=p.map(setProductAndVendor,cves)
    print(len(vulnerableCases))

    #processes = [Process(target=setProductAndVendor(cves)) for _ in range(NUM_WORKERS)]
    #[process.start() for process in processes]
    #[process.join() for process in processes]

    end_time = time.time()
    #setProductAndVendor(getAllCve())

    print("Parallel time=", end_time - start_time)

    vulnerableCases=getStatisticsData()
    print("after", len(vulnerableCases))
    #createCSV()
    createProvaCSV()
    print("OnlyRepository ", len(onlyRepository))
    print(" Repository e commit ", len(repositoryCommit))
    print(" Only Tracker ", len(onlyTracker))
    print(" Repository e Tracker ", len(repositoryTracker))
    print("All data ", len(allData))
    print(" Only Product ", len(onlyProduct))

'''def setRepositoryAndTracker(cves):
    for cve in cves:
        vcs = [x for x in vulnerableCases if x._cve == cve['id']]
        for reference in cve['references']:
            if reference.find("/github")!= -1:
                #print(reference)
                split = reference.split("/")
                repository = split[0] + "/" + split[1] + "/" + split[2] + "/" + split[3] + "/" + split[4]

                vc = next((x for x in vcs if x._product == split[3]), None)

                if vc != None:
                    vc._repository = repository
                else:
                    vc = Vulnerable_Cases(cve['id'], split[4], split[3], repository, "")
                    vulnerableCases.append(vc)
                if reference.find("commit")!=-1:
                        vc._commit=split[6]
                        #print(vc._commit)
                print(vc.toString())
            if reference.find("bug") != -1 or reference.find("tracker") != -1 or reference.find("issues")!=-1:
                 if(reference[-1].isdigit()):
                     for vc in vcs:
                         vc._tracker.append(reference)
                         print(vc.toString())'''





#setRepositoryAndTracker(getAllCve())
#print(len(vulnerableCases))




'''for cve in cves:
 #print(cve)
 checkRC = False
 checkR = False
 checkT = False
 for reference in cve['references']:
     if reference.find("github")!=-1 and reference.find("commit")!=-1:
         repositoryCommit.append(cve)
         checkRC=True
     else:
         if reference.find("github")!=-1:
             onlyRepository.append(cve)
             checkR=True

         else:
             if reference.find("bug") != -1 or reference.find("tracker") != -1 or reference.find("issues")!=-1:
                 if(reference[-1].isdigit()):
                     #print(reference)
                     onlyTracker.append(cve)
                     checkT = True

 if checkRC and checkT:
     repositoryCommit.remove(cve)
     onlyTracker.remove(cve)
     allData.append(cve)
 else:
     if checkR and checkT:
         onlyRepository.remove(cve)
         onlyTracker.remove(cve)
         repositoryTracker.append(cve)'''


'''for cve in onlyTracker:
    time.sleep(1)
    for cpe in cve['vulnerable_configuration']:

        product=cpe.split(':')[4]
    try:

        url="https://api.github.com/search/repositories?q="
        myresponse=requests.get(url+product)
        if(myresponse.ok):
            print("ok")
            jData = json.loads(myresponse.content)
            if jData['total_count']==1:
                onlyTracker.remove(cve)
                repositoryTracker.append(cve)
                print("repository tracker")
    except:
        print(myresponse.content)'''




