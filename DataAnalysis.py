from operator import attrgetter

import pandas as pd
import pydriller as py
from statistics import *




df = pd.read_csv('RepositoryeCommit.csv', sep='|', names=['CVE', 'summary', 'CWE','Published date','Last update','CVSS','Impact confidentiality','Impact integrity','Impact availability','Product name','Vendor name','Url_repository','Commit_id','Url_trackers'],skiprows=1)
dict=dict()

def introducingCommitFile(repo,commit,v):
    #print(repo)
    #print(commit)
    #print(v)
    print("Metodo introducing commit")
    commits=py.RepositoryMining(repo,to_commit=commit).traverse_commits()
    #print(len(list(commits)))
    for commit in commits:
        print(commit.hash)
        for m in commit.modifications:
            if m.filename==v.filename:
                print("trovato file")
                print("trovato"+commit.hash)
                return commit



def when(repo,commitHash,cve,product):
        modifications={}
        numCommit={}
        introducingCommit = []

        print(commitHash)
        '''for commit in py.RepositoryMining(repo).traverse_commits():

         gr = py.GitRepository(commit.project_path)

         if commit.hash == commitHash:
            introducing_commit=gr.get_commits_last_modified_lines(commit)
            print(len(introducing_commit))
            for commit in introducing_commit:
                rp=py.RepositoryMining(repo,single=commit)
                commitObjects=rp.traverse_commits()
                for commitObject in commitObjects:
                    modifications[commitObject.hash]=commitObject.modifications
                    introducingCommit.append(commitObject)'''

        for commit in py.RepositoryMining("https://github.com/ishepard/pydriller").traverse_commits():
                    gr = py.GitRepository(commit.project_path)
                    if commit.hash == "751fca5ede7e286c5598152e1ea9dbfd49a9ce98":
                        bug_inducing = gr.get_commits_last_modified_lines(commit)

                        bug_inducing = [gr.get_commit(x) for x in bug_inducing]
                        oldest_commit = min(bug_inducing, key=attrgetter('author_date'))

                        for m in oldest_commit.modifications:
                            print(m.filename)



def isEnhancement(repo,commit):
    for commit in py.RepositoryMining(repo,single=commit).traverse_commits():
        print(commit.msg)
        if ('updat' or 'modif' or 'upgrad' or 'export' or 'remov' or 'integrat' or 'support' or 'enhancement' or 'replace' or 'includ' or 'expos' or 'better' or 'svn' or 'generate') in commit.msg.lower():
            return True
        else:
            return False

def isNewFeature(repo,commit):
    for commit in py.RepositoryMining(repo,single=commit).traverse_commits():
        if ('new' or 'feature' or 'add' or 'create' or 'introduc' or 'migrat') in commit.msg.lower():
            return True
        else:
            return False

def isBugFixing(repo,commit):
    for commit in py.RepositoryMining(repo,single=commit).traverse_commits():
        if ('fix' or 'repair' or 'error' or 'avoid' or 'can ' or 'bug ' or 'issue ' or '#' or 'exception') in commit.msg.lower():
            return True
        else:
            return False

def isRefactoring(repo,commit):
    for commit in py.RepositoryMining(repo,single=commit).traverse_commits():
        if ('renam' or 'reorganiz' or 'refactor' or 'clean' or 'polish' or 'typo' or 'move' or 'extract' or 'reorder' or 're-order') in commit.msg.lower():
            return True
        else:
            return False

for index,row in df.iterrows():
 print("Risultati relativi alla vulnerabilità " + row[0] + " all'interno del progetto " + row[9])
 result=when(row[11],row[12],row[0],row[9])
 print(len(result[0].values()))
 print("La media del numero di commit prima dell'introduzione della vulnerabilità è "+mean(result[0].values()))
 print("La mediana del numero di commit prima dell'introduzione della vulnerabilità è " + median(result[0].values()))
 print("La varianza del numero di commit prima dell'introduzione della vulnerabilità è " + pvariance(result[0].values()))
 print("La deviazione standard del numero di commit prima dell'introduzione della vulnerabilità è " + pstdev(result[0].values()))
 for commit in result[1]:
     print("Enhancement ",isEnhancement(row[11],commit))
     print("Bug fixing ",isBugFixing(row[11],commit))
     print("New feature ",isNewFeature(row[11],commit))
     print("Refactoring ",isRefactoring(row[11],commit))




