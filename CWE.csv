cwe|name|description
CWE-1004|Sensitive Cookie Without HttpOnly Flag|The software uses a cookie to store sensitive information
CWE-1007|Insufficient Visual Distinction of Homoglyphs Presented to User|The software displays information or identifiers to a user
CWE-102|Struts: Duplicate Validation Forms|The application uses multiple validation forms with the same name
CWE-1021|Improper Restriction of Rendered UI Layers or Frames|The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain
CWE-1022|Improper Restriction of Cross-Origin Permission to window.opener.location|The web application does not restrict or incorrectly restricts modification of its window opener objects location property by an external application from a different origin.
CWE-103|Struts: Incomplete validate() Method Definition|The application has a validator form that either does not define a validate() method
CWE-104|Struts: Form Bean Does Not Extend Validation Class|If a form bean does not extend an ActionForm subclass of the Validator framework
CWE-105|Struts: Form Field Without Validator|The application has a form field that is not validated by a corresponding validation form
CWE-106|Struts: Plug-in Framework not in Use|When an application does not use an input validation framework such as the Struts Validator
CWE-107|Struts: Unused Validation Form|An unused validation form indicates that validation logic is not up-to-date.
CWE-108|Struts: Unvalidated Action Form|Every Action Form must have a corresponding validation form.
CWE-109|Struts: Validator Turned Off|Automatic filtering via a Struts bean has been turned off
CWE-11|ASP.NET Misconfiguration: Creating Debug Binary|Debugging messages help attackers learn about the system and plan a form of attack.
CWE-110|Struts: Validator Without Form Field|Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.
CWE-111|Direct Use of Unsafe JNI|When a Java application uses the Java Native Interface (JNI) to call code written in another programming language
CWE-112|Missing XML Validation|The software accepts XML from an untrusted source but does not validate the XML against the proper schema.
CWE-113|Improper Neutralization of CRLF Sequences in HTTP Headers (HTTP Response Splitting)|The software receives data from an upstream component
CWE-114|Process Control|Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.
CWE-115|Misinterpretation of Input|The software misinterprets an input
CWE-116|Improper Encoding or Escaping of Output|The software prepares a structured message for communication with another component
CWE-117|Improper Output Neutralization for Logs|The software does not neutralize or incorrectly neutralizes output that is written to logs.
CWE-118|Incorrect Access of Indexable Resource (Range Error)|The software does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer
CWE-119|Improper Restriction of Operations within the Bounds of a Memory Buffer|The software performs operations on a memory buffer
CWE-12|ASP.NET Misconfiguration: Missing Custom Error Page|An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the frameworks built-in responses.
CWE-120|Buffer Copy without Checking Size of Input (Classic Buffer Overflow)|The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer
CWE-121|Stack-based Buffer Overflow|A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e.
CWE-122|Heap-based Buffer Overflow|A heap overflow condition is a buffer overflow
CWE-123|Write-what-where Condition|Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location
CWE-124|Buffer Underwrite (Buffer Underflow)|The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.
CWE-125|Out-of-bounds Read|The software reads data past the end
CWE-126|Buffer Over-read|The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.
CWE-127|Buffer Under-read|The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.
CWE-128|Wrap-around Error|Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small
CWE-129|Improper Validation of Array Index|The product uses untrusted input when calculating or using an array index
CWE-13|ASP.NET Misconfiguration: Password in Configuration File|Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.
CWE-130|Improper Handling of Length Parameter Inconsistency |The software parses a formatted message or structure
CWE-131|Incorrect Calculation of Buffer Size|The software does not correctly calculate the size to be used when allocating a buffer
CWE-134|Use of Externally-Controlled Format String|The software uses a function that accepts a format string as an argument
CWE-135|Incorrect Calculation of Multi-Byte String Length|The software does not correctly calculate the length of strings that can contain wide or multi-byte characters.
CWE-138|Improper Neutralization of Special Elements|The software receives input from an upstream component
CWE-14|Compiler Removal of Code to Clear Buffers|Sensitive memory is cleared according to the source code
CWE-140|Improper Neutralization of Delimiters|The software does not neutralize or incorrectly neutralizes delimiters.
CWE-141|Improper Neutralization of Parameter/Argument Delimiters|The software receives input from an upstream component
CWE-142|Improper Neutralization of Value Delimiters|The software receives input from an upstream component
CWE-143|Improper Neutralization of Record Delimiters|The software receives input from an upstream component
CWE-144|Improper Neutralization of Line Delimiters|The software receives input from an upstream component
CWE-145|Improper Neutralization of Section Delimiters|The software receives input from an upstream component
CWE-146|Improper Neutralization of Expression/Command Delimiters|The software receives input from an upstream component
CWE-147|Improper Neutralization of Input Terminators|The software receives input from an upstream component
CWE-148|Improper Neutralization of Input Leaders|The application does not properly handle when a leading character or sequence (leader) is missing or malformed
CWE-149|Improper Neutralization of Quoting Syntax|Quotes injected into an application can be used to compromise a system. As data are parsed
CWE-15|External Control of System or Configuration Setting|One or more system settings or configuration elements can be externally controlled by a user.
CWE-150|Improper Neutralization of Escape|Variant
CWE-151|Improper Neutralization of Comment Delimiters|The software receives input from an upstream component
CWE-152|Improper Neutralization of Macro Symbols|The software receives input from an upstream component
CWE-153|Improper Neutralization of Substitution Characters|The software receives input from an upstream component
CWE-154|Improper Neutralization of Variable Name Delimiters|The software receives input from an upstream component
CWE-155|Improper Neutralization of Wildcards or Matching Symbols|The software receives input from an upstream component
CWE-156|Improper Neutralization of Whitespace|The software receives input from an upstream component
CWE-157|Failure to Sanitize Paired Delimiters|The software does not properly handle the characters that are used to mark the beginning and ending of a group of entities
CWE-158|Improper Neutralization of Null Byte or NUL Character|The software receives input from an upstream component
CWE-159|Failure to Sanitize Special Element|Weaknesses in this attack-focused category do not properly filter and interpret special elements in user-controlled input which could cause adverse effect on the software behavior and integrity.
CWE-160|Improper Neutralization of Leading Special Elements|The software receives input from an upstream component
CWE-161|Improper Neutralization of Multiple Leading Special Elements|The software receives input from an upstream component
CWE-162|Improper Neutralization of Trailing Special Elements|The software receives input from an upstream component
CWE-163|Improper Neutralization of Multiple Trailing Special Elements|The software receives input from an upstream component
CWE-164|Improper Neutralization of Internal Special Elements|The software receives input from an upstream component
CWE-165|Improper Neutralization of Multiple Internal Special Elements|The software receives input from an upstream component
CWE-166|Improper Handling of Missing Special Element|The software receives input from an upstream component
CWE-167|Improper Handling of Additional Special Element|The software receives input from an upstream component
CWE-168|Improper Handling of Inconsistent Special Elements|The software does not handle when an inconsistency exists between two or more special characters or reserved words.
CWE-170|Improper Null Termination|The software does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.
CWE-172|Encoding Error|The software does not properly encode or decode the data
CWE-173|Improper Handling of Alternate Encoding|The software does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.
CWE-174|Double Decoding of the Same Data|The software decodes the same input twice
CWE-175|Improper Handling of Mixed Encoding|The software does not properly handle when the same input uses several different (mixed) encodings.
CWE-176|Improper Handling of Unicode Encoding|The software does not properly handle when an input contains Unicode encoding.
CWE-177|Improper Handling of URL Encoding (Hex Encoding)|The software does not properly handle when all or part of an input has been URL encoded.
CWE-178|Improper Handling of Case Sensitivity|The software does not properly account for differences in case sensitivity when accessing or determining the properties of a resource
CWE-179|Incorrect Behavior Order: Early Validation|The software validates input before applying protection mechanisms that modify the input
CWE-180|Incorrect Behavior Order: Validate Before Canonicalize|The software validates input before it is canonicalized
CWE-181|Incorrect Behavior Order: Validate Before Filter|The software validates data before it has been filtered
CWE-182|Collapse of Data into Unsafe Value|The software filters data in a way that causes it to be reduced or collapsed into an unsafe value that violates an expected security property.
CWE-183|Permissive Whitelist|An application uses a whitelist of acceptable values
CWE-184|Incomplete Blacklist|An application uses a blacklist of prohibited values
CWE-185|Incorrect Regular Expression|The software specifies a regular expression in a way that causes data to be improperly matched or compared.
CWE-186|Overly Restrictive Regular Expression|A regular expression is overly restrictive
CWE-187|Partial Comparison|The software performs a comparison that only examines a portion of a factor before determining whether there is a match
CWE-188|Reliance on Data/Memory Layout|The software makes invalid assumptions about how protocol data or memory is organized at a lower level
CWE-190|Integer Overflow or Wraparound|The software performs a calculation that can produce an integer overflow or wraparound
CWE-191|Integer Underflow (Wrap or Wraparound)|The product subtracts one value from another
CWE-192|Integer Coercion Error|Integer coercion refers to a set of flaws pertaining to the type casting
CWE-193|Off-by-one Error|A product calculates or uses an incorrect maximum or minimum value that is 1 more
CWE-194|Unexpected Sign Extension|The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative
CWE-195|Signed to Unsigned Conversion Error|The software uses a signed primitive and performs a cast to an unsigned primitive
CWE-196|Unsigned to Signed Conversion Error|The software uses an unsigned primitive and performs a cast to a signed primitive
CWE-197|Numeric Truncation Error|Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.
CWE-198|Use of Incorrect Byte Ordering|The software receives input from an upstream component
CWE-20|Improper Input Validation|The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program.
CWE-200|Information Exposure|An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.
CWE-201|Information Exposure Through Sent Data|The accidental exposure of sensitive information through sent data refers to the transmission of data which are either sensitive in and of itself or useful in the further exploitation of the system through standard data channels.
CWE-202|Exposure of Sensitive Data Through Data Queries|When trying to keep information confidential
CWE-203|Information Exposure Through Discrepancy|The product behaves differently or sends different responses in a way that exposes security-relevant information about the state of the product
CWE-204|Response Discrepancy Information Exposure|The software provides different responses to incoming requests in a way that allows an actor to determine system state information that is outside of that actors control sphere.
CWE-205|Information Exposure Through Behavioral Discrepancy|The products actions indicate important differences based on (1) the internal state of the product or (2) differences from other products in the same class.
CWE-206|Information Exposure of Internal State Through Behavioral Inconsistency|Two separate operations in a product cause the product to behave differently in a way that is observable to an attacker and reveals security-relevant information about the internal state of the product
CWE-207|Information Exposure Through an External Behavioral Inconsistency|The product behaves differently than other products like it
CWE-208|Information Exposure Through Timing Discrepancy|Two separate operations in a product require different amounts of time to complete
CWE-209|Information Exposure Through an Error Message|The software generates an error message that includes sensitive information about its environment
CWE-210|Information Exposure Through Self-generated Error Message|The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.
CWE-211|Information Exposure Through Externally-Generated Error Message|The software performs an operation that triggers an external diagnostic or error message that is not directly generated by the software
CWE-212|Improper Cross-boundary Removal of Sensitive Data|The software uses a resource that contains sensitive data
CWE-213|Intentional Information Exposure|A products design or configuration explicitly requires the publication of information that could be regarded as sensitive by an administrator.
CWE-214|Information Exposure Through Process Environment|A process is invoked with sensitive arguments
CWE-215|Information Exposure Through Debug Information|The application contains debugging code that can expose sensitive information to untrusted parties.
CWE-216|Containment Errors (Container Errors)|This tries to cover various problems in which improper data are included within a container.
CWE-219|Sensitive Data Under Web Root|The application stores sensitive data under the web document root with insufficient access control
CWE-22|Improper Limitation of a Pathname to a Restricted Directory (Path Traversal)|The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory
CWE-220|Sensitive Data Under FTP Root|The application stores sensitive data under the FTP document root with insufficient access control
CWE-221|Information Loss or Omission|The software does not record
CWE-222|Truncation of Security-relevant Information|The application truncates the display
CWE-223|Omission of Security-relevant Information|The application does not record or display information that would be important for identifying the source or nature of an attack
CWE-224|Obscured Security-relevant Information by Alternate Name|The software records security-relevant information according to an alternate name of the affected entity
CWE-226|Sensitive Information Uncleared Before Release|The software does not fully clear previously used information in a data structure
CWE-228|Improper Handling of Syntactically Invalid Structure|The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.
CWE-229|Improper Handling of Values|The software does not properly handle when the expected number of values for parameters
CWE-23|Relative Path Traversal|The software uses external input to construct a pathname that should be within a restricted directory
CWE-230|Improper Handling of Missing Values|The software does not handle or incorrectly handles when a parameter
CWE-231|Improper Handling of Extra Values|The software does not handle or incorrectly handles when more values are provided than expected.
CWE-232|Improper Handling of Undefined Values|The software does not handle or incorrectly handles when a value is not defined or supported for the associated parameter
CWE-233|Improper Handling of Parameters|The software does not properly handle when the expected number of parameters
CWE-234|Failure to Handle Missing Parameter|If too few arguments are sent to a function
CWE-235|Improper Handling of Extra Parameters|The software does not handle or incorrectly handles when the number of parameters
CWE-236|Improper Handling of Undefined Parameters|The software does not handle or incorrectly handles when a particular parameter
CWE-237|Improper Handling of Structural Elements|The software does not handle or incorrectly handles inputs that are related to complex structures.
CWE-238|Improper Handling of Incomplete Structural Elements|The software does not handle or incorrectly handles when a particular structural element is not completely specified.
CWE-239|Failure to Handle Incomplete Element|The software does not properly handle when a particular element is not completely specified.
CWE-24|Path Traversal: ../filedir|The software uses external input to construct a pathname that should be within a restricted directory
CWE-240|Improper Handling of Inconsistent Structural Elements|The software does not handle or incorrectly handles when two or more structural elements should be consistent
CWE-241|Improper Handling of Unexpected Data Type|The software does not handle or incorrectly handles when a particular element is not the expected type
CWE-242|Use of Inherently Dangerous Function|The program calls a function that can never be guaranteed to work safely.
CWE-243|Creation of chroot Jail Without Changing Working Directory|The program uses the chroot() system call to create a jail
CWE-244|Improper Clearing of Heap Memory Before Release (Heap Inspection)|Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack
CWE-245|J2EE Bad Practices: Direct Management of Connections|The J2EE application directly manages connections
CWE-246|J2EE Bad Practices: Direct Use of Sockets|The J2EE application directly uses sockets instead of using framework method calls.
CWE-248|Uncaught Exception|An exception is thrown from a function
CWE-25|Path Traversal: /../filedir|The software uses external input to construct a pathname that should be within a restricted directory
CWE-250|Execution with Unnecessary Privileges|The software performs an operation at a privilege level that is higher than the minimum level required
CWE-252|Unchecked Return Value|The software does not check the return value from a method or function
CWE-253|Incorrect Check of Function Return Value|The software incorrectly checks a return value from a function
CWE-256|Plaintext Storage of a Password|Storing a password in plaintext may result in a system compromise.
CWE-257|Storing Passwords in a Recoverable Format|The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact
CWE-258|Empty Password in Configuration File|Using an empty string as a password is insecure.
CWE-259|Use of Hard-coded Password|The software contains a hard-coded password
CWE-26|Path Traversal: /dir/../filename|The software uses external input to construct a pathname that should be within a restricted directory
CWE-260|Password in Configuration File|The software stores a password in a configuration file that might be accessible to actors who do not know the password.
CWE-261|Weak Cryptography for Passwords|Obscuring a password with a trivial encoding does not protect the password.
CWE-262|Not Using Password Aging|If no mechanism is in place for managing password aging
CWE-263|Password Aging with Long Expiration|Allowing password aging to occur unchecked can result in the possibility of diminished password integrity.
CWE-266|Incorrect Privilege Assignment|A product incorrectly assigns a privilege to a particular actor
CWE-267|Privilege Defined With Unsafe Actions|A particular privilege
CWE-268|Privilege Chaining|Two distinct privileges
CWE-269|Improper Privilege Management|The software does not properly assign
CWE-27|Path Traversal: dir/../../filename|The software uses external input to construct a pathname that should be within a restricted directory
CWE-270|Privilege Context Switching Error|The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.
CWE-271|Privilege Dropping / Lowering Errors|The software does not drop privileges before passing control of a resource to an actor that does not have those privileges.
CWE-272|Least Privilege Violation|The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.
CWE-273|Improper Check for Dropped Privileges|The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.
CWE-274|Improper Handling of Insufficient Privileges|The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation
CWE-276|Incorrect Default Permissions|The software
CWE-277|Insecure Inherited Permissions|A product defines a set of insecure permissions that are inherited by objects that are created by the program.
CWE-278|Insecure Preserved Inherited Permissions|A product inherits a set of insecure permissions for an object
CWE-279|Incorrect Execution-Assigned Permissions|While it is executing
CWE-28|Path Traversal: ..filedir|The software uses external input to construct a pathname that should be within a restricted directory
CWE-280|Improper Handling of Insufficient Permissions or Privileges |The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state.
CWE-281|Improper Preservation of Permissions|The software does not preserve permissions or incorrectly preserves permissions when copying
CWE-282|Improper Ownership Management|The software assigns the wrong ownership
CWE-283|Unverified Ownership|The software does not properly verify that a critical resource is owned by the proper entity.
CWE-284|Improper Access Control|The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.
CWE-285|Improper Authorization|The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.
CWE-286|Incorrect User Management|The software does not properly manage a user within its environment.
CWE-287|Improper Authentication|When an actor claims to have a given identity
CWE-288|Authentication Bypass Using an Alternate Path or Channel|A product requires authentication
CWE-289|Authentication Bypass by Alternate Name|The software performs authentication based on the name of a resource being accessed
CWE-29|Path Traversal: ..filename|The software uses external input to construct a pathname that should be within a restricted directory
CWE-290|Authentication Bypass by Spoofing|This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks.
CWE-291|Reliance on IP Address for Authentication|The software uses an IP address for authentication.
CWE-293|Using Referer Field for Authentication|The referer field in HTTP requests can be easily modified and
CWE-294|Authentication Bypass by Capture-replay|A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).
CWE-295|Improper Certificate Validation|The software does not validate
CWE-296|Improper Following of a Certificates Chain of Trust|The software does not follow
CWE-297|Improper Validation of Certificate with Host Mismatch|The software communicates with a host that provides a certificate
CWE-298|Improper Validation of Certificate Expiration|A certificate expiration is not validated or is incorrectly validated
CWE-299|Improper Check for Certificate Revocation|The software does not check or incorrectly checks the revocation status of a certificate
CWE-30|Path Traversal: dir..filename|The software uses external input to construct a pathname that should be within a restricted directory
CWE-300|Channel Accessible by Non-Endpoint (Man-in-the-Middle)|The product does not adequately verify the identity of actors at both ends of a communication channel
CWE-301|Reflection Attack in an Authentication Protocol|Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.
CWE-302|Authentication Bypass by Assumed-Immutable Data|The authentication scheme or implementation uses key data elements that are assumed to be immutable
CWE-303|Incorrect Implementation of Authentication Algorithm|The requirements for the software dictate the use of an established authentication algorithm
CWE-304|Missing Critical Step in Authentication|The software implements an authentication technique
CWE-305|Authentication Bypass by Primary Weakness|The authentication algorithm is sound
CWE-306|Missing Authentication for Critical Function|The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.
CWE-307|Improper Restriction of Excessive Authentication Attempts|The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame
CWE-308|Use of Single-factor Authentication|The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.
CWE-309|Use of Password System for Primary Authentication|The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings
CWE-31|Path Traversal: dir....filename|The software uses external input to construct a pathname that should be within a restricted directory
CWE-311|Missing Encryption of Sensitive Data|The software does not encrypt sensitive or critical information before storage or transmission.
CWE-312|Cleartext Storage of Sensitive Information|The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere.
CWE-313|Cleartext Storage in a File or on Disk|The application stores sensitive information in cleartext in a file
CWE-314|Cleartext Storage in the Registry|The application stores sensitive information in cleartext in the registry.
CWE-315|Cleartext Storage of Sensitive Information in a Cookie|The application stores sensitive information in cleartext in a cookie.
CWE-316|Cleartext Storage of Sensitive Information in Memory|The application stores sensitive information in cleartext in memory.
CWE-317|Cleartext Storage of Sensitive Information in GUI|The application stores sensitive information in cleartext within the GUI.
CWE-318|Cleartext Storage of Sensitive Information in Executable|The application stores sensitive information in cleartext in an executable.
CWE-319|Cleartext Transmission of Sensitive Information|The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.
CWE-32|Path Traversal: ... (Triple Dot)|The software uses external input to construct a pathname that should be within a restricted directory
CWE-321|Use of Hard-coded Cryptographic Key|The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.
CWE-322|Key Exchange without Entity Authentication|The software performs a key exchange with an actor without verifying the identity of that actor.
CWE-323|Reusing a Nonce|Incomplete
CWE-324|Use of a Key Past its Expiration Date|The product uses a cryptographic key or password past its expiration date
CWE-325|Missing Required Cryptographic Step|The software does not implement a required step in a cryptographic algorithm
CWE-326|Inadequate Encryption Strength|The software stores or transmits sensitive data using an encryption scheme that is theoretically sound
CWE-327|Use of a Broken or Risky Cryptographic Algorithm|The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information.
CWE-328|Reversible One-Way Hash|The product uses a hashing algorithm that produces a hash value that can be used to determine the original input
CWE-329|Not Using a Random IV with CBC Mode|Not using a random initialization Vector (IV) with Cipher Block Chaining (CBC) Mode causes algorithms to be susceptible to dictionary attacks.
CWE-33|Path Traversal: .... (Multiple Dot)|The software uses external input to construct a pathname that should be within a restricted directory
CWE-330|Use of Insufficiently Random Values|The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers.
CWE-331|Insufficient Entropy|The software uses an algorithm or scheme that produces insufficient entropy
CWE-332|Insufficient Entropy in PRNG|The lack of entropy available for
CWE-333|Improper Handling of Insufficient Entropy in TRNG|True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.
CWE-334|Small Space of Random Values|The number of possible random values is smaller than needed by the product
CWE-335|Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)|The software uses a Pseudo-Random Number Generator (PRNG) that does not correctly manage seeds.
CWE-336|Same Seed in Pseudo-Random Number Generator (PRNG)|A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.
CWE-337|Predictable Seed in Pseudo-Random Number Generator (PRNG)|A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed
CWE-338|Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)|The product uses a Pseudo-Random Number Generator (PRNG) in a security context
CWE-339|Small Seed Space in PRNG|A PRNG uses a relatively small space of seeds.
CWE-34|Path Traversal: ....//|The software uses external input to construct a pathname that should be within a restricted directory
CWE-340|Predictability Problems|Weaknesses in this category are related to schemes that generate numbers or identifiers that are more predictable than required by the application.
CWE-341|Predictable from Observable State|A number or object is predictable based on observations that the attacker can make about the state of the system or network
CWE-342|Predictable Exact Value from Previous Values|An exact value or random number can be precisely predicted by observing previous values.
CWE-343|Predictable Value Range from Previous Values|The softwares random number generator produces a series of values which
CWE-344|Use of Invariant Value in Dynamically Changing Context|The product uses a constant value
CWE-345|Insufficient Verification of Data Authenticity|The software does not sufficiently verify the origin or authenticity of data
CWE-346|Origin Validation Error|The software does not properly verify that the source of data or communication is valid.
CWE-347|Improper Verification of Cryptographic Signature|The software does not verify
CWE-348|Use of Less Trusted Source|The software has two different sources of the same data or information
CWE-349|Acceptance of Extraneous Untrusted Data With Trusted Data|The software
CWE-35|Path Traversal: .../...//|The software uses external input to construct a pathname that should be within a restricted directory
CWE-350|Reliance on Reverse DNS Resolution for a Security-Critical Action|The software performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision
CWE-351|Insufficient Type Distinction|The software does not properly distinguish between different types of elements in a way that leads to insecure behavior.
CWE-352|Cross-Site Request Forgery (CSRF)|The web application does not
CWE-353|Missing Support for Integrity Check|The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission
CWE-354|Improper Validation of Integrity Check Value|The software does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.
CWE-356|Product UI does not Warn User of Unsafe Actions|The softwares user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.
CWE-357|Insufficient UI Warning of Dangerous Operations|The user interface provides a warning to a user regarding dangerous or sensitive operations
CWE-358|Improperly Implemented Security Check for Standard|The software does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm
CWE-359|Exposure of Private Information (Privacy Violation)|The software does not properly prevent private data (such as credit card numbers) from being accessed by actors who either (1) are not explicitly authorized to access the data or (2) do not have the implicit consent of the people to which the data is related.
CWE-36|Absolute Path Traversal|The software uses external input to construct a pathname that should be within a restricted directory
CWE-360|Trust of System Event Data|Security based on event locations are insecure and can be spoofed.
CWE-362|Concurrent Execution using Shared Resource with Improper Synchronization (Race Condition)|The program contains a code sequence that can run concurrently with other code
CWE-363|Race Condition Enabling Link Following|The software checks the status of a file or directory before accessing it
CWE-364|Signal Handler Race Condition|The software uses a signal handler that introduces a race condition.
CWE-365|Race Condition in Switch|The code contains a switch statement in which the switched variable can be modified while the switch is still executing
CWE-366|Race Condition within a Thread|If two threads of execution use a resource simultaneously
CWE-367|Time-of-check Time-of-use (TOCTOU) Race Condition|The software checks the state of a resource before using that resource
CWE-368|Context Switching Race Condition|A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries
CWE-369|Divide By Zero|The product divides a value by zero.
CWE-37|Path Traversal: /absolute/pathname/here|A software system that accepts input in the form of a slash absolute path (/absolute/pathname/here) without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-370|Missing Check for Certificate Revocation after Initial Check|The software does not check the revocation status of a certificate after its initial revocation check
CWE-372|Incomplete Internal State Distinction|The software does not properly determine which state it is in
CWE-374|Passing Mutable Objects to an Untrusted Method|The program sends non-cloned mutable data as an argument to a method or function.
CWE-375|Returning a Mutable Object to an Untrusted Caller|Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.
CWE-377|Insecure Temporary File|Creating and using insecure temporary files can leave application and system data vulnerable to attack.
CWE-378|Creation of Temporary File With Insecure Permissions|Opening temporary files without appropriate measures or controls can leave the file
CWE-379|Creation of Temporary File in Directory with Incorrect Permissions|The software creates a temporary file in a directory whose permissions allow unintended actors to determine the files existence or otherwise access that file.
CWE-38|Path Traversal: absolutepathnamehere|A software system that accepts input in the form of a backslash absolute path (absolutepathnamehere) without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-382|J2EE Bad Practices: Use of System.exit()|A J2EE application uses System.exit()
CWE-383|J2EE Bad Practices: Direct Use of Threads|Thread management in a Web application is forbidden in some circumstances and is always highly error prone.
CWE-384|Session Fixation|Authenticating a user
CWE-385|Covert Timing Channel|Covert timing channels convey information by modulating some aspect of system behavior over time
CWE-386|Symbolic Name not Mapping to Correct Object|A constant symbolic reference to an object is used
CWE-39|Path Traversal: C:dirname|An attacker can inject a drive letter or Windows volume letter (C:dirname) into a software system to potentially redirect access to an unintended location or arbitrary file.
CWE-390|Detection of Error Condition Without Action|The software detects a specific error
CWE-391|Unchecked Error Condition|Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.
CWE-392|Missing Report of Error Condition|The software encounters an error but does not provide a status code or return value to indicate that an error has occurred.
CWE-393|Return of Wrong Status Code|A function or operation returns an incorrect return value or status code that does not indicate an error
CWE-394|Unexpected Status Code or Return Value|The software does not properly check when a function or operation returns a value that is legitimate for the function
CWE-395|Use of NullPointerException Catch to Detect NULL Pointer Dereference|Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.
CWE-396|Declaration of Catch for Generic Exception|Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.
CWE-397|Declaration of Throws for Generic Exception|Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.
CWE-40|Path Traversal: UNCsharename (Windows UNC Share)|An attacker can inject a Windows UNC share (UNCsharename) into a software system to potentially redirect access to an unintended location or arbitrary file.
CWE-400|Uncontrolled Resource Consumption (Resource Exhaustion)|The software does not properly restrict the size or amount of resources that are requested or influenced by an actor
CWE-401|Improper Release of Memory Before Removing Last Reference (Memory Leak)|The software does not sufficiently track and release allocated memory after it has been used
CWE-402|Transmission of Private Resources into a New Sphere (Resource Leak)|The software makes resources available to untrusted parties when those resources are only intended to be accessed by the software.
CWE-403|Exposure of File Descriptor to Unintended Control Sphere (File Descriptor Leak)|A process does not close sensitive file descriptors before invoking a child process
CWE-404|Improper Resource Shutdown or Release|The program does not release or incorrectly releases a resource before it is made available for re-use.
CWE-405|Asymmetric Resource Consumption (Amplification)|Software that does not appropriately monitor or control resource consumption can lead to adverse system performance.
CWE-406|Insufficient Control of Network Message Volume (Network Amplification)|The software does not sufficiently monitor or control transmitted network traffic volume
CWE-407|Algorithmic Complexity|An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker
CWE-408|Incorrect Behavior Order: Early Amplification|The software allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.
CWE-409|Improper Handling of Highly Compressed Data (Data Amplification)|The software does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.
CWE-41|Improper Resolution of Path Equivalence|The system or application is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.
CWE-410|Insufficient Resource Pool|The softwares resource pool is not large enough to handle peak demand
CWE-412|Unrestricted Externally Accessible Lock|The software properly checks for the existence of a lock
CWE-413|Improper Resource Locking|The software does not lock or does not correctly lock a resource when the software must have exclusive access to the resource.
CWE-414|Missing Lock Check|A product does not check to see if a lock is present before performing sensitive operations on a resource.
CWE-415|Double Free|The product calls free() twice on the same memory address
CWE-416|Use After Free|Referencing memory after it has been freed can cause a program to crash
CWE-419|Unprotected Primary Channel|The software uses a primary channel for administration or restricted functionality
CWE-42|Path Equivalence: filename. (Trailing Dot)|A software system that accepts path input in the form of trailing dot (filedir.) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-420|Unprotected Alternate Channel|The software protects a primary channel
CWE-421|Race Condition During Access to Alternate Channel|The product opens an alternate channel to communicate with an authorized user
CWE-422|Unprotected Windows Messaging Channel (Shatter)|The software does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges
CWE-424|Improper Protection of Alternate Path|The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.
CWE-425|Direct Request (Forced Browsing)|The web application does not adequately enforce appropriate authorization on all restricted URLs
CWE-426|Untrusted Search Path|The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the applications direct control.
CWE-427|Uncontrolled Search Path Element|The product uses a fixed or controlled search path to find resources
CWE-428|Unquoted Search Path or Element|The product uses a search path that contains an unquoted element
CWE-43|Path Equivalence: filename.... (Multiple Trailing Dot)|A software system that accepts path input in the form of multiple trailing dot (filedir....) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-430|Deployment of Wrong Handler|The wrong handler is assigned to process an object.
CWE-431|Missing Handler|A handler is not available or implemented.
CWE-432|Dangerous Signal Handler not Disabled During Sensitive Operations|The application uses a signal handler that shares state with other signal handlers
CWE-433|Unparsed Raw Web Content Delivery|The software stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.
CWE-434|Unrestricted Upload of File with Dangerous Type|The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the products environment.
CWE-435|Improper Interaction Between Multiple Entities|An interaction error occurs when two entities work correctly when running independently
CWE-436|Interpretation Conflict|Product A handles inputs or steps differently than Product B
CWE-437|Incomplete Model of Endpoint Features|A product acts as an intermediary or monitor between two or more endpoints
CWE-439|Behavioral Change in New Version or Environment|As behavior or functionality changes with a new version of A
CWE-44|Path Equivalence: file.name (Internal Dot)|A software system that accepts path input in the form of internal dot (file.ordir) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-440|Expected Behavior Violation|A feature
CWE-441|Unintended Proxy or Intermediary (Confused Deputy)|The software receives a request
CWE-444|Inconsistent Interpretation of HTTP Requests (HTTP Request Smuggling)|When malformed or abnormal HTTP requests are interpreted by one or more entities in the data flow between the user and the web server
CWE-446|UI Discrepancy for Security Feature|The user interface does not correctly enable or configure a security feature
CWE-447|Unimplemented or Unsupported Feature in UI|A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported
CWE-448|Obsolete Feature in UI|A UI function is obsolete and the product does not warn the user.
CWE-449|The UI Performs the Wrong Action|The UI performs the wrong action with respect to the users request.
CWE-45|Path Equivalence: file...name (Multiple Internal Dot)|A software system that accepts path input in the form of multiple internal dot (file...dir) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-450|Multiple Interpretations of UI Input|The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.
CWE-451|User Interface (UI) Misrepresentation of Critical Information|The user interface (UI) does not properly represent critical information to the user
CWE-453|Insecure Default Variable Initialization|The software
CWE-454|External Initialization of Trusted Variables or Data Stores|The software initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.
CWE-455|Non-exit on Failed Initialization|The software does not exit or otherwise modify its operation when security-relevant errors occur during initialization
CWE-456|Missing Initialization of a Variable|The software does not initialize critical variables
CWE-457|Use of Uninitialized Variable|The code uses a variable that has not been initialized
CWE-459|Incomplete Cleanup|The software does not properly clean up and remove temporary or supporting resources after they have been used.
CWE-46|Path Equivalence: filename  (Trailing Space)|A software system that accepts path input in the form of trailing space (filedir ) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-460|Improper Cleanup on Thrown Exception|The product does not clean up its state or incorrectly cleans up its state when an exception is thrown
CWE-462|Duplicate Key in Associative List (Alist)|Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.
CWE-463|Deletion of Data Structure Sentinel|The accidental deletion of a data-structure sentinel can cause serious programming logic problems.
CWE-464|Addition of Data Structure Sentinel|The accidental addition of a data-structure sentinel can cause serious programming logic problems.
CWE-466|Return of Pointer Value Outside of Expected Range|A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.
CWE-467|Use of sizeof() on a Pointer Type|The code calls sizeof() on a malloced pointer type
CWE-468|Incorrect Pointer Scaling|In C and C++
CWE-469|Use of Pointer Subtraction to Determine Size|The application subtracts one pointer from another in order to determine size
CWE-47|Path Equivalence:  filename (Leading Space)|A software system that accepts path input in the form of leading space ( filedir) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-470|Use of Externally-Controlled Input to Select Classes or Code (Unsafe Reflection)|The application uses external input with reflection to select which classes or code to use
CWE-471|Modification of Assumed-Immutable Data (MAID)|The software does not properly protect an assumed-immutable element from being modified by an attacker.
CWE-472|External Control of Assumed-Immutable Web Parameter|The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable
CWE-473|PHP External Variable Modification|A PHP application does not properly protect against the modification of variables from external sources
CWE-474|Use of Function with Inconsistent Implementations|The code uses a function that has inconsistent implementations across operating systems and versions.
CWE-475|Undefined Behavior for Input to API|The behavior of this function is undefined unless its control parameter is set to a specific value.
CWE-476|NULL Pointer Dereference|A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid
CWE-477|Use of Obsolete Function|The code uses deprecated or obsolete functions
CWE-478|Missing Default Case in Switch Statement|The code does not have a default case in a switch statement
CWE-479|Signal Handler Use of a Non-reentrant Function|The program defines a signal handler that calls a non-reentrant function.
CWE-48|Path Equivalence: file name (Internal Whitespace)|A software system that accepts path input in the form of internal space (file(SPACE)name) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-480|Use of Incorrect Operator|The programmer accidentally uses the wrong operator
CWE-481|Assigning instead of Comparing|The code uses an operator for assignment when the intention was to perform a comparison.
CWE-482|Comparing instead of Assigning|The code uses an operator for comparison when the intention was to perform an assignment.
CWE-483|Incorrect Block Delimitation|The code does not explicitly delimit a block that is intended to contain 2 or more statements
CWE-484|Omitted Break Statement in Switch|The program omits a break statement within a switch or similar construct
CWE-486|Comparison of Classes by Name|The program compares classes by name
CWE-487|Reliance on Package-level Scope|Java packages are not inherently closed; therefore
CWE-488|Exposure of Data Element to Wrong Session|The product does not sufficiently enforce boundaries between the states of different sessions
CWE-489|Leftover Debug Code|The application can be deployed with active debugging code that can create unintended entry points.
CWE-49|Path Equivalence: filename/ (Trailing Slash)|A software system that accepts path input in the form of trailing slash (filedir/) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-491|Public cloneable() Method Without Final (Object Hijack)|A class has a cloneable() method that is not declared final
CWE-492|Use of Inner Class Containing Sensitive Data|Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.
CWE-493|Critical Public Variable Without Final Modifier|The product has a critical public variable that is not final
CWE-494|Download of Code Without Integrity Check|The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.
CWE-495|Private Array-Typed Field Returned From A Public Method|The product has a method that is declared public
CWE-496|Public Data Assigned to Private Array-Typed Field|Assigning public data to a private array is equivalent to giving public access to the array.
CWE-497|Exposure of System Data to an Unauthorized Control Sphere|Exposing system data or debugging information helps an adversary learn about the system and form an attack plan.
CWE-498|Cloneable Class Containing Sensitive Information|The code contains a class with sensitive data
CWE-499|Serializable Class Containing Sensitive Data|The code contains a class with sensitive data
CWE-5|J2EE Misconfiguration: Data Transmission Without Encryption|Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.
CWE-50|Path Equivalence: //multiple/leading/slash|A software system that accepts path input in the form of multiple leading slash (//multiple/leading/slash) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-500|Public Static Field Not Marked Final|An object contains a public static field that is not marked final
CWE-501|Trust Boundary Violation|The product mixes trusted and untrusted data in the same data structure or structured message.
CWE-502|Deserialization of Untrusted Data|The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.
CWE-506|Embedded Malicious Code|The application contains code that appears to be malicious in nature.
CWE-507|Trojan Horse|The software appears to contain benign or useful functionality
CWE-508|Non-Replicating Malicious Code|Non-replicating malicious code only resides on the target system or software that is attacked; it does not attempt to spread to other systems.
CWE-509|Replicating Malicious Code (Virus or Worm)|Replicating malicious code
CWE-51|Path Equivalence: /multiple//internal/slash|A software system that accepts path input in the form of multiple internal slash (/multiple//internal/slash/) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-510|Trapdoor|A trapdoor is a hidden piece of code that responds to a special input
CWE-511|Logic/Time Bomb|The software contains code that is designed to disrupt the legitimate operation of the software (or its environment) when a certain time passes
CWE-512|Spyware|The software collects personally identifiable information about a human user or the users activities
CWE-514|Covert Channel|A covert channel is a path that can be used to transfer information in a way not intended by the systems designers.
CWE-515|Covert Storage Channel|A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.
CWE-52|Path Equivalence: /multiple/trailing/slash//|A software system that accepts path input in the form of multiple trailing slash (/multiple/trailing/slash//) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-520|.NET Misconfiguration: Use of Impersonation|Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.
CWE-521|Weak Password Requirements|The product does not require that users should have strong passwords
CWE-522|Insufficiently Protected Credentials|This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and/or retrieval.
CWE-523|Unprotected Transport of Credentials|Login pages not using adequate measures to protect the user name and password while they are in transit from the client to the server.
CWE-524|Information Exposure Through Caching|The application uses a cache to maintain a pool of objects
CWE-525|Information Exposure Through Browser Caching|For each web page
CWE-526|Information Exposure Through Environmental Variables|Environmental variables may contain sensitive information about a remote server.
CWE-527|Exposure of CVS Repository to an Unauthorized Control Sphere|The product stores a CVS repository in a directory or other container that is accessible to actors outside of the intended control sphere.
CWE-528|Exposure of Core Dump File to an Unauthorized Control Sphere|The product generates a core dump file in a directory that is accessible to actors outside of the intended control sphere.
CWE-529|Exposure of Access Control List Files to an Unauthorized Control Sphere|The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.
CWE-53|Path Equivalence: multipleinternalbackslash|A software system that accepts path input in the form of multiple internal backslash (multipletrailingslash) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-530|Exposure of Backup File to an Unauthorized Control Sphere|A backup file is stored in a directory that is accessible to actors outside of the intended control sphere.
CWE-531|Information Exposure Through Test Code|Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications
CWE-532|Information Exposure Through Log Files|Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.
CWE-533|Information Exposure Through Server Log Files|A server.log file was found. This can give information on whatever application left the file. Usually this can give full path names and system information
CWE-534|Information Exposure Through Debug Log Files|The application does not sufficiently restrict access to a log file that is used for debugging.
CWE-535|Information Exposure Through Shell Error Message|A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases
CWE-536|Information Exposure Through Servlet Runtime Error Message|A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.
CWE-537|Information Exposure Through Java Runtime Error Message|In many cases
CWE-538|File and Directory Information Exposure|The product stores sensitive information in files or directories that are accessible to actors outside of the intended control sphere.
CWE-539|Information Exposure Through Persistent Cookies|Persistent cookies are cookies that are stored on the browsers hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed.
CWE-54|Path Equivalence: filedir (Trailing Backslash)|A software system that accepts path input in the form of trailing backslash (filedir) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-540|Information Exposure Through Source Code|Source code on a web server often contains sensitive information and should generally not be accessible to users.
CWE-541|Information Exposure Through Include Source Code|If an include file source is accessible
CWE-542|Information Exposure Through Cleanup Log Files|The application does not properly protect or delete a log file related to cleanup.
CWE-543|Use of Singleton Pattern Without Synchronization in a Multithreaded Context|The software uses the singleton pattern when creating a resource within a multithreaded environment.
CWE-544|Missing Standardized Error Handling Mechanism|The software does not use a standardized method for handling errors throughout the code
CWE-546|Suspicious Comment|The code contains comments that suggest the presence of bugs
CWE-547|Use of Hard-coded|Draft
CWE-548|Information Exposure Through Directory Listing|A directory listing is inappropriately exposed
CWE-549|Missing Password Field Masking|The software does not mask passwords during entry
CWE-55|Path Equivalence: /./ (Single Dot Directory)|A software system that accepts path input in the form of single dot directory exploit (/./) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-550|Information Exposure Through Server Error Message|Certain conditions
CWE-551|Incorrect Behavior Order: Authorization Before Parsing and Canonicalization|If a web server does not fully parse requested URLs before it examines them for authorization
CWE-552|Files or Directories Accessible to External Parties|Files or directories are accessible in the environment that should not be.
CWE-553|Command Shell in Externally Accessible Directory|A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.
CWE-554|ASP.NET Misconfiguration: Not Using Input Validation Framework|The ASP.NET application does not use an input validation framework.
CWE-555|J2EE Misconfiguration: Plaintext Password in Configuration File|The J2EE application stores a plaintext password in a configuration file.
CWE-556|ASP.NET Misconfiguration: Use of Identity Impersonation|Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.
CWE-558|Use of getlogin() in Multithreaded Application|The application uses the getlogin() function in a multithreaded context
CWE-56|Path Equivalence: filedir* (Wildcard)|A software system that accepts path input in the form of asterisk wildcard (filedir*) without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.
CWE-560|Use of umask() with chmod-style Argument|The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().
CWE-561|Dead Code|The software contains dead code
CWE-562|Return of Stack Variable Address|A function returns the address of a stack variable
CWE-563|Assignment to Variable without Use|The variables value is assigned but never used
CWE-564|SQL Injection: Hibernate|Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statements meaning or to execute arbitrary SQL commands.
CWE-565|Reliance on Cookies without Validation and Integrity Checking|The application relies on the existence or values of cookies when performing security-critical operations
CWE-566|Authorization Bypass Through User-Controlled SQL Primary Key|The software uses a database table that includes records that should not be accessible to an actor
CWE-567|Unsynchronized Access to Shared Data in a Multithreaded Context|The product does not properly synchronize shared data
CWE-568|finalize() Method Without super.finalize()|The software contains a finalize() method that does not call super.finalize().
CWE-57|Path Equivalence: fakedir/../realdir/filename|The software contains protection mechanisms to restrict access to realdir/filename
CWE-570|Expression is Always False|The software contains an expression that will always evaluate to false.
CWE-571|Expression is Always True|The software contains an expression that will always evaluate to true.
CWE-572|Call to Thread run() instead of start()|The program calls a threads run() method instead of calling start()
CWE-573|Improper Following of Specification by Caller|The software does not follow or incorrectly follows the specifications as required by the implementation language
CWE-574|EJB Bad Practices: Use of Synchronization Primitives|The program violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.
CWE-575|EJB Bad Practices: Use of AWT Swing|The program violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.
CWE-576|EJB Bad Practices: Use of Java I/O|The program violates the Enterprise JavaBeans (EJB) specification by using the java.io package.
CWE-577|EJB Bad Practices: Use of Sockets|The program violates the Enterprise JavaBeans (EJB) specification by using sockets.
CWE-578|EJB Bad Practices: Use of Class Loader|The program violates the Enterprise JavaBeans (EJB) specification by using the class loader.
CWE-579|J2EE Bad Practices: Non-serializable Object Stored in Session|The application stores a non-serializable object as an HttpSession attribute
CWE-58|Path Equivalence: Windows 8.3 Filename|The software contains a protection mechanism that restricts access to a long filename on a Windows operating system
CWE-580|clone() Method Without super.clone()|The software contains a clone() method that does not call super.clone() to obtain the new object.
CWE-581|Object Model Violation: Just One of Equals and Hashcode Defined|The software does not maintain equal hashcodes for equal objects.
CWE-582|Array Declared Public|Variant
CWE-583|finalize() Method Declared Public|The program violates secure coding principles for mobile code by declaring a finalize() method public.
CWE-584|Return Inside Finally Block|The code has a return statement inside a finally block
CWE-585|Empty Synchronized Block|The software contains an empty synchronized block.
CWE-586|Explicit Call to Finalize()|The software makes an explicit call to the finalize() method from outside the finalizer.
CWE-587|Assignment of a Fixed Address to a Pointer|The software sets a pointer to a specific address other than NULL or 0.
CWE-588|Attempt to Access Child of a Non-structure Pointer|Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.
CWE-589|Call to Non-ubiquitous API|The software uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.
CWE-59|Improper Link Resolution Before File Access (Link Following)|The software attempts to access a file based on the filename
CWE-590|Free of Memory not on the Heap|The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc()
CWE-591|Sensitive Data Storage in Improperly Locked Memory|The application stores sensitive data in memory that is not locked
CWE-593|Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created|The software modifies the SSL context after connection creation has begun.
CWE-594|J2EE Framework: Saving Unserializable Objects to Disk|When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.
CWE-595|Comparison of Object References Instead of Object Contents|The program compares object references instead of the contents of the objects themselves
CWE-596|Incorrect Semantic Object Comparison|The software does not correctly compare two objects based on their conceptual content.
CWE-597|Use of Wrong Operator in String Comparison|The product uses the wrong operator when comparing a string
CWE-598|Information Exposure Through Query Strings in GET Request|The web application uses the GET method to process requests that contain sensitive information
CWE-599|Missing Validation of OpenSSL Certificate|The software uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.
CWE-6|J2EE Misconfiguration: Insufficient Session-ID Length|The J2EE application is configured to use an insufficient session ID length.
CWE-600|Uncaught Exception in Servlet |The Servlet does not catch all exceptions
CWE-601|URL Redirection to Untrusted Site (Open Redirect)|A web application accepts a user-controlled input that specifies a link to an external site
CWE-602|Client-Side Enforcement of Server-Side Security|The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.
CWE-603|Use of Client-Side Authentication|A client/server product performs authentication within client code but not in server code
CWE-605|Multiple Binds to the Same Port|When multiple sockets are allowed to bind to the same port
CWE-606|Unchecked Input for Loop Condition|The product does not properly check inputs that are used for loop conditions
CWE-607|Public Static Final Field References Mutable Object|A public or protected static final field references a mutable object
CWE-608|Struts: Non-private Field in ActionForm Class|An ActionForm class contains a field that has not been declared private
CWE-609|Double-Checked Locking|The program uses double-checked locking to access a resource without the overhead of explicit synchronization
CWE-61|UNIX Symbolic Link (Symlink) Following|The software
CWE-610|Externally Controlled Reference to a Resource in Another Sphere|The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.
CWE-611|Improper Restriction of XML External Entity Reference (XXE)|The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control
CWE-612|Information Exposure Through Indexing of Private Data|The product performs an indexing routine against private documents
CWE-613|Insufficient Session Expiration|According to WASC
CWE-614|Sensitive Cookie in HTTPS Session Without Secure Attribute|The Secure attribute for sensitive cookies in HTTPS sessions is not set
CWE-615|Information Exposure Through Comments|While adding general comments is very useful
CWE-616|Incomplete Identification of Uploaded File Variables (PHP)|The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname
CWE-617|Reachable Assertion|The product contains an assert() or similar statement that can be triggered by an attacker
CWE-618|Exposed Unsafe ActiveX Method|An ActiveX control is intended for use in a web browser
CWE-619|Dangling Database Cursor (Cursor Injection)|If a database cursor is not closed properly
CWE-62|UNIX Hard Link|The software
CWE-620|Unverified Password Change|When setting a new password for a user
CWE-621|Variable Extraction Error|The product uses external input to determine the names of variables into which information is extracted
CWE-622|Improper Validation of Function Hook Arguments|A product adds hooks to user-accessible API functions
CWE-623|Unsafe ActiveX Control Marked Safe For Scripting|An ActiveX control is intended for restricted use
CWE-624|Executable Regular Expression Error|The product uses a regular expression that either (1) contains an executable component with user-controlled inputs
CWE-625|Permissive Regular Expression|The product uses a regular expression that does not sufficiently restrict the set of allowed values.
CWE-626|Null Byte Interaction Error (Poison Null Byte)|The product does not properly handle null bytes or NUL characters when passing data between different representations or components.
CWE-627|Dynamic Variable Evaluation|In a language where the user can influence the name of a variable at runtime
CWE-628|Function Call with Incorrectly Specified Arguments|The product calls a function
CWE-636|Not Failing Securely (Failing Open)|When the product encounters an error condition or failure
CWE-637|Unnecessary Complexity in Protection Mechanism (Not Using Economy of Mechanism)|The software uses a more complex mechanism than necessary
CWE-638|Not Using Complete Mediation|The software does not perform access checks on a resource every time the resource is accessed by an entity
CWE-639|Authorization Bypass Through User-Controlled Key|The systems authorization functionality does not prevent one user from gaining access to another users data or record by modifying the key value identifying the data.
CWE-64|Windows Shortcut Following (.LNK)|The software
CWE-640|Weak Password Recovery Mechanism for Forgotten Password|The software contains a mechanism for users to recover or change their passwords without knowing the original password
CWE-641|Improper Restriction of Names for Files and Other Resources|The application constructs the name of a file or other resource using input from an upstream component
CWE-642|External Control of Critical State Data|The software stores security-critical state information about its users
CWE-643|Improper Neutralization of Data within XPath Expressions (XPath Injection)|The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database
CWE-644|Improper Neutralization of HTTP Headers for Scripting Syntax|The application does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers
CWE-645|Overly Restrictive Account Lockout Mechanism|The software contains an account lockout protection mechanism
CWE-646|Reliance on File Name or Extension of Externally-Supplied File|The software allows a file to be uploaded
CWE-647|Use of Non-Canonical URL Paths for Authorization Decisions|The software defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.
CWE-648|Incorrect Use of Privileged APIs|The application does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.
CWE-649|Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking|The software uses obfuscation or encryption of inputs that should not be mutable by an external actor
CWE-65|Windows Hard Link|The software
CWE-650|Trusting HTTP Permission Methods on the Server Side|The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks
CWE-651|Information Exposure Through WSDL File|The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).
CWE-652|Improper Neutralization of Data within XQuery Expressions (XQuery Injection)|The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database
CWE-653|Insufficient Compartmentalization|The product does not sufficiently compartmentalize functionality or processes that require different privilege levels
CWE-654|Reliance on a Single Factor in a Security Decision|A protection mechanism relies exclusively
CWE-655|Insufficient Psychological Acceptability|The software has a protection mechanism that is too difficult or inconvenient to use
CWE-656|Reliance on Security Through Obscurity|The software uses a protection mechanism whose strength depends heavily on its obscurity
CWE-657|Violation of Secure Design Principles|The product violates well-established principles for secure design.
CWE-66|Improper Handling of File Names that Identify Virtual Resources|The product does not handle or incorrectly handles a file name that identifies a virtual resource that is not directly specified within the directory that is associated with the file name
CWE-662|Improper Synchronization|The software attempts to use a shared resource in an exclusive manner
CWE-663|Use of a Non-reentrant Function in a Concurrent Context|The software calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.
CWE-664|Improper Control of a Resource Through its Lifetime|The software does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation
CWE-665|Improper Initialization|The software does not initialize or incorrectly initializes a resource
CWE-666|Operation on Resource in Wrong Phase of Lifetime|The software performs an operation on a resource at the wrong phase of the resources lifecycle
CWE-667|Improper Locking|The software does not properly acquire a lock on a resource
CWE-668|Exposure of Resource to Wrong Sphere|The product exposes a resource to the wrong control sphere
CWE-669|Incorrect Resource Transfer Between Spheres|The product does not properly transfer a resource/behavior to another sphere
CWE-67|Improper Handling of Windows Device Names|The software constructs pathnames from user input
CWE-670|Always-Incorrect Control Flow Implementation|The code contains a control flow path that does not reflect the algorithm that the path is intended to implement
CWE-671|Lack of Administrator Control over Security|The product uses security features in a way that prevents the products administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.
CWE-672|Operation on a Resource after Expiration or Release|The software uses
CWE-673|External Influence of Sphere Definition|The product does not prevent the definition of control spheres from external actors.
CWE-674|Uncontrolled Recursion|The product does not properly control the amount of recursion that takes place
CWE-675|Duplicate Operations on Resource|The product performs the same operation on a resource two or more times
CWE-676|Use of Potentially Dangerous Function|The program invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly
CWE-680|Integer Overflow to Buffer Overflow|The product performs a calculation to determine how much memory to allocate
CWE-681|Incorrect Conversion between Numeric Types|When converting from one data type to another
CWE-682|Incorrect Calculation|The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.
CWE-683|Function Call With Incorrect Order of Arguments|The software calls a function
CWE-684|Incorrect Provision of Specified Functionality|The code does not function according to its published specifications
CWE-685|Function Call With Incorrect Number of Arguments|The software calls a function
CWE-686|Function Call With Incorrect Argument Type|The software calls a function
CWE-687|Function Call With Incorrectly Specified Argument Value|The software calls a function
CWE-688|Function Call With Incorrect Variable or Reference as Argument|The software calls a function
CWE-689|Permission Race Condition During Resource Copy|The product
CWE-69|Improper Handling of Windows ::DATA Alternate Data Stream|The software does not properly prevent access to
CWE-690|Unchecked Return Value to NULL Pointer Dereference|The product does not check for an error after calling a function that can return with a NULL pointer if the function fails
CWE-691|Insufficient Control Flow Management|The code does not sufficiently manage its control flow during execution
CWE-692|Incomplete Blacklist to Cross-Site Scripting|The product uses a blacklist-based protection mechanism to defend against XSS attacks
CWE-693|Protection Mechanism Failure|The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.
CWE-694|Use of Multiple Resources with Duplicate Identifier|The software uses multiple resources that can have the same identifier
CWE-695|Use of Low-Level Functionality|The software uses low-level functionality that is explicitly prohibited by the framework or specification under which the software is supposed to operate.
CWE-696|Incorrect Behavior Order|The software performs multiple related behaviors
CWE-697|Insufficient Comparison|The software compares two entities in a security-relevant context
CWE-698|Execution After Redirect (EAR)|The web application sends a redirect to another location
CWE-7|J2EE Misconfiguration: Missing Custom Error Page|The default error page of a web application should not display sensitive information about the software system.
CWE-703|Improper Check or Handling of Exceptional Conditions|The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.
CWE-704|Incorrect Type Conversion or Cast|The software does not correctly convert an object
CWE-705|Incorrect Control Flow Scoping|The software does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.
CWE-706|Use of Incorrectly-Resolved Name or Reference|The software uses a name or reference to access a resource
CWE-707|Improper Enforcement of Message or Data Structure|The software does not enforce or incorrectly enforces that structured messages or data are well-formed before being read from an upstream component or sent to a downstream component.
CWE-708|Incorrect Ownership Assignment|The software assigns an owner to a resource
CWE-710|Improper Adherence to Coding Standards|The software does not follow certain coding rules for development
CWE-72|Improper Handling of Apple HFS+ Alternate Data Stream Path|The software does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.
CWE-73|External Control of File Name or Path|The software allows user input to control or influence paths or file names that are used in filesystem operations.
CWE-732|Incorrect Permission Assignment for Critical Resource|The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.
CWE-733|Compiler Optimization Removal or Modification of Security-critical Code|The developer builds a security-critical protection mechanism into the software but the compiler optimizes the program such that the mechanism is removed or modified.
CWE-74|Improper Neutralization of Special Elements in Output Used by a Downstream Component (Injection)|The software constructs all or part of a command
CWE-749|Exposed Dangerous Method or Function|The software provides an Applications Programming Interface (API) or similar interface for interaction with external actors
CWE-75|Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)|The software does not adequately filter user-controlled input for special elements with control implications.
CWE-754|Improper Check for Unusual or Exceptional Conditions|The software does not check or improperly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software.
CWE-755|Improper Handling of Exceptional Conditions|The software does not handle or incorrectly handles an exceptional condition.
CWE-756|Missing Custom Error Page|The software does not return custom error pages to the user
CWE-757|Selection of Less-Secure Algorithm During Negotiation (Algorithm Downgrade)|A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication
CWE-758|Reliance on Undefined|Class
CWE-759|Use of a One-Way Hash without a Salt|The software uses a one-way cryptographic hash against an input that should not be reversible
CWE-76|Improper Neutralization of Equivalent Special Elements|The software properly neutralizes certain special elements
CWE-760|Use of a One-Way Hash with a Predictable Salt|The software uses a one-way cryptographic hash against an input that should not be reversible
CWE-761|Free of Pointer not at Start of Buffer|The application calls free() on a pointer to a memory resource that was allocated on the heap
CWE-762|Mismatched Memory Management Routines|The application attempts to return a memory resource to the system
CWE-763|Release of Invalid Pointer or Reference|The application attempts to return a memory resource to the system
CWE-764|Multiple Locks of a Critical Resource|The software locks a critical resource more times than intended
CWE-765|Multiple Unlocks of a Critical Resource|The software unlocks a critical resource more times than intended
CWE-766|Critical Variable Declared Public|The software declares a critical variable or field to be public when intended security policy requires it to be private.
CWE-767|Access to Critical Private Variable via Public Method|The software defines a public method that reads or modifies a private variable.
CWE-768|Incorrect Short Circuit Evaluation|The software contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional
CWE-769|Uncontrolled File Descriptor Consumption|The software does not properly limit the number of open file descriptors that it uses.
CWE-77|Improper Neutralization of Special Elements used in a Command (Command Injection)|The software constructs all or part of a command using externally-influenced input from an upstream component
CWE-770|Allocation of Resources Without Limits or Throttling|The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated
CWE-771|Missing Reference to Active Allocated Resource|The software does not properly maintain a reference to a resource that has been allocated
CWE-772|Missing Release of Resource after Effective Lifetime|The software does not release a resource after its effective lifetime has ended
CWE-773|Missing Reference to Active File Descriptor or Handle|The software does not properly maintain references to a file descriptor or handle
CWE-774|Allocation of File Descriptors or Handles Without Limits or Throttling|The software allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated
CWE-775|Missing Release of File Descriptor or Handle after Effective Lifetime|The software does not release a file descriptor or handle after its effective lifetime has ended
CWE-776|Improper Restriction of Recursive Entity References in DTDs (XML Entity Expansion)|The software uses XML documents and allows their structure to be defined with a Document Type Definition (DTD)
CWE-777|Regular Expression without Anchors|The software uses a regular expression to perform neutralization
CWE-778|Insufficient Logging|When a security-critical event occurs
CWE-779|Logging of Excessive Data|The software logs too much information
CWE-78|Improper Neutralization of Special Elements used in an OS Command (OS Command Injection)|The software constructs all or part of an OS command using externally-influenced input from an upstream component
CWE-780|Use of RSA Algorithm without OAEP|The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP)
CWE-781|Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code|The software defines an IOCTL that uses METHOD_NEITHER for I/O
CWE-782|Exposed IOCTL with Insufficient Access Control|The software implements an IOCTL with functionality that should be restricted
CWE-783|Operator Precedence Logic Error|The program uses an expression in which operator precedence causes incorrect logic to be used.
CWE-784|Reliance on Cookies without Validation and Integrity Checking in a Security Decision|The application uses a protection mechanism that relies on the existence or values of a cookie
CWE-785|Use of Path Manipulation Function without Maximum-sized Buffer|The software invokes a function for normalizing paths or file names
CWE-786|Access of Memory Location Before Start of Buffer|The software reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.
CWE-787|Out-of-bounds Write|The software writes data past the end
CWE-788|Access of Memory Location After End of Buffer|The software reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.
CWE-789|Uncontrolled Memory Allocation|The product allocates memory based on an untrusted size value
CWE-79|Improper Neutralization of Input During Web Page Generation (Cross-site Scripting)|The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.
CWE-790|Improper Filtering of Special Elements|The software receives data from an upstream component
CWE-791|Incomplete Filtering of Special Elements|The software receives data from an upstream component
CWE-792|Incomplete Filtering of One or More Instances of Special Elements|The software receives data from an upstream component
CWE-793|Only Filtering One Instance of a Special Element|The software receives data from an upstream component
CWE-794|Incomplete Filtering of Multiple Instances of Special Elements|The software receives data from an upstream component
CWE-795|Only Filtering Special Elements at a Specified Location|The software receives data from an upstream component
CWE-796|Only Filtering Special Elements Relative to a Marker|The software receives data from an upstream component
CWE-797|Only Filtering Special Elements at an Absolute Position|The software receives data from an upstream component
CWE-798|Use of Hard-coded Credentials|The software contains hard-coded credentials
CWE-799|Improper Control of Interaction Frequency|The software does not properly limit the number or frequency of interactions that it has with an actor
CWE-8|J2EE Misconfiguration: Entity Bean Declared Remote|When an application exposes a remote interface for an entity bean
CWE-80|Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)|The software receives input from an upstream component
CWE-804|Guessable CAPTCHA|The software uses a CAPTCHA challenge
CWE-805|Buffer Access with Incorrect Length Value|The software uses a sequential operation to read or write a buffer
CWE-806|Buffer Access Using Size of Source Buffer|The software uses the size of a source buffer when reading from or writing to a destination buffer
CWE-807|Reliance on Untrusted Inputs in a Security Decision|The application uses a protection mechanism that relies on the existence or values of an input
CWE-81|Improper Neutralization of Script in an Error Message Web Page|The software receives input from an upstream component
CWE-82|Improper Neutralization of Script in Attributes of IMG Tags in a Web Page|The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags
CWE-820|Missing Synchronization|The software utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.
CWE-821|Incorrect Synchronization|The software utilizes a shared resource in a concurrent manner but it does not correctly synchronize access to the resource.
CWE-822|Untrusted Pointer Dereference|The program obtains a value from an untrusted source
CWE-823|Use of Out-of-range Pointer Offset|The program performs pointer arithmetic on a valid pointer
CWE-824|Access of Uninitialized Pointer|The program accesses or uses a pointer that has not been initialized.
CWE-825|Expired Pointer Dereference|The program dereferences a pointer that contains a location for memory that was previously valid
CWE-826|Premature Release of Resource During Expected Lifetime|The program releases a resource that is still intended to be used by the program itself or another actor.
CWE-827|Improper Control of Document Type Definition|The software does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs
CWE-828|Signal Handler with Functionality that is not Asynchronous-Safe|The software defines a signal handler that contains code sequences that are not asynchronous-safe
CWE-829|Inclusion of Functionality from Untrusted Control Sphere|The software imports
CWE-83|Improper Neutralization of Script in Attributes in a Web Page|The software does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags
CWE-830|Inclusion of Web Functionality from an Untrusted Source|The software includes web functionality (such as a web widget) from another domain
CWE-831|Signal Handler Function Associated with Multiple Signals|The software defines a function that is used as a handler for more than one signal.
CWE-832|Unlock of a Resource that is not Locked|The software attempts to unlock a resource that is not locked.
CWE-833|Deadlock|The software contains multiple threads or executable segments that are waiting for each other to release a necessary lock
CWE-834|Excessive Iteration|The software performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.
CWE-835|Loop with Unreachable Exit Condition (Infinite Loop)|The program contains an iteration or loop with an exit condition that cannot be reached
CWE-836|Use of Password Hash Instead of Password for Authentication|The software records password hashes in a data store
CWE-837|Improper Enforcement of a Single|Incomplete
CWE-838|Inappropriate Encoding for Output Context|The software uses or specifies an encoding when generating output to a downstream component
CWE-839|Numeric Range Comparison Without Minimum Check|The program checks a value to ensure that it does not exceed a maximum
CWE-84|Improper Neutralization of Encoded URI Schemes in a Web Page|The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.
CWE-841|Improper Enforcement of Behavioral Workflow|The software supports a session in which more than one behavior must be performed by an actor
CWE-842|Placement of User into Incorrect Group|The software or the administrator places a user into an incorrect group.
CWE-843|Access of Resource Using Incompatible Type (Type Confusion)|The program allocates or initializes a resource such as a pointer
CWE-85|Doubled Character XSS Manipulations|The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.
CWE-86|Improper Neutralization of Invalid Characters in Identifiers in Web Pages|The software does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names
CWE-862|Missing Authorization|The software does not perform an authorization check when an actor attempts to access a resource or perform an action.
CWE-863|Incorrect Authorization|The software performs an authorization check when an actor attempts to access a resource or perform an action
CWE-87|Improper Neutralization of Alternate XSS Syntax|The software does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.
CWE-88|Argument Injection or Modification|The software does not sufficiently delimit the arguments being passed to a component in another control sphere
CWE-89|Improper Neutralization of Special Elements used in an SQL Command (SQL Injection)|The software constructs all or part of an SQL command using externally-influenced input from an upstream component
CWE-9|J2EE Misconfiguration: Weak Access Permissions for EJB Methods|If elevated access rights are assigned to EJB methods
CWE-90|Improper Neutralization of Special Elements used in an LDAP Query (LDAP Injection)|The software constructs all or part of an LDAP query using externally-influenced input from an upstream component
CWE-908|Use of Uninitialized Resource|The software uses a resource that has not been properly initialized.
CWE-909|Missing Initialization of Resource|The software does not initialize a critical resource.
CWE-91|XML Injection (aka Blind XPath Injection)|The software does not properly neutralize special elements that are used in XML
CWE-910|Use of Expired File Descriptor|The software uses or accesses a file descriptor after it has been closed.
CWE-911|Improper Update of Reference Count|The software uses a reference count to manage a resource
CWE-912|Hidden Functionality|The software contains functionality that is not documented
CWE-913|Improper Control of Dynamically-Managed Code Resources|The software does not properly restrict reading from or writing to dynamically-managed code resources such as variables
CWE-914|Improper Control of Dynamically-Identified Variables|The software does not properly restrict reading from or writing to dynamically-identified variables.
CWE-915|Improperly Controlled Modification of Dynamically-Determined Object Attributes|The software receives input from an upstream component that specifies multiple attributes
CWE-916|Use of Password Hash With Insufficient Computational Effort|The software generates a hash for a password
CWE-917|Improper Neutralization of Special Elements used in an Expression Language Statement (Expression Language Injection)|The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component
CWE-918|Server-Side Request Forgery (SSRF)|The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL
CWE-920|Improper Restriction of Power Consumption|The software operates in an environment in which power is a limited resource that cannot be automatically replenished
CWE-921|Storage of Sensitive Data in a Mechanism without Access Control|The software stores sensitive information in a file system or device that does not have built-in access control.
CWE-922|Insecure Storage of Sensitive Information|The software stores sensitive information without properly limiting read or write access by unauthorized actors.
CWE-923|Improper Restriction of Communication Channel to Intended Endpoints|The software establishes a communication channel to (or from) an endpoint for privileged or protected operations
CWE-924|Improper Enforcement of Message Integrity During Transmission in a Communication Channel|The software establishes a communication channel with an endpoint and receives a message from that endpoint
CWE-925|Improper Verification of Intent by Broadcast Receiver|The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.
CWE-926|Improper Export of Android Application Components|The Android application exports a component for use by other applications
CWE-927|Use of Implicit Intent for Sensitive Communication|The Android application uses an implicit intent for transmitting sensitive data to other applications.
CWE-93|Improper Neutralization of CRLF Sequences (CRLF Injection)|The software uses CRLF (carriage return line feeds) as a special element
CWE-939|Improper Authorization in Handler for Custom URL Scheme|The software uses a handler for a custom URL scheme
CWE-94|Improper Control of Generation of Code (Code Injection)|The software constructs all or part of a code segment using externally-influenced input from an upstream component
CWE-940|Improper Verification of Source of a Communication Channel|The software establishes a communication channel to handle an incoming request that has been initiated by an actor
CWE-941|Incorrectly Specified Destination in a Communication Channel|The software creates a communication channel to initiate an outgoing request to an actor
CWE-942|Overly Permissive Cross-domain Whitelist|The software uses a cross-domain policy file that includes domains that should not be trusted.
CWE-943|Improper Neutralization of Special Elements in Data Query Logic|The application generates a query intended to access or manipulate data in a data store such as a database
CWE-95|Improper Neutralization of Directives in Dynamically Evaluated Code (Eval Injection)|The software receives input from an upstream component
CWE-96|Improper Neutralization of Directives in Statically Saved Code (Static Code Injection)|The software receives input from an upstream component
CWE-97|Improper Neutralization of Server-Side Includes (SSI) Within a Web Page|The software generates a web page
CWE-98|Improper Control of Filename for Include/Require Statement in PHP Program (PHP Remote File Inclusion)|The PHP application receives input from an upstream component
CWE-99|Improper Control of Resource Identifiers (Resource Injection)|The software receives input from an upstream component
CWE-NVD-noinfo||
CWE-NVD-Other||
