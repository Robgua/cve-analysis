from bs4 import BeautifulSoup
import requests
import pandas as pd


class getReleases:

    releases=[]

    def __init__(self, repo):
        self.repo=repo

    def getAllReleases(self):
        # Here, we're just importing both Beautiful Soup and the Requests library


            page_link = self.repo+"/releases"
            # this is the url that we've already determined is safe and legal to scrape from.
            while(page_link!=None):
                print(page_link)
                page_response = requests.get(page_link, timeout=5)
                # here, we fetch the content from the url, using the requests library
                page_content = BeautifulSoup(page_response.content, "html.parser")
                #print(page_content)
                #we use the html parser to parse the url content and store it in a variable.

                links=page_content.find_all("a",attrs={"rel":"nofollow"})
                found=False
                for a in links:

                    if a['href'].find("github")!=-1 and a.text=="Next":
                        found=True
                        page_link=a['href']
                if not found:
                    page_link=None

                paragraphs = page_content.find_all("div",attrs={"class":"release-entry"})
                #textContent.append(paragraphs)


                #print(len(paragraphs))
                for i in range(1,len(paragraphs)):
                   #print("One element")
                   #print(i)
                   date=paragraphs[i].find_all("relative-time")[0]['datetime'].split('T')[0]
                   release=paragraphs[i].find_all("a")[0]['href'].split('/')[5]
                   self.releases.append((release,date))


            return self.releases  #print(len(textContent))


    def getMajorReleases(self):
        self.getAllReleases()
        majorRelease=[]

        for r in self.releases:
            #print(r[0])
            type=self.extractTypeOfRelease(r[0])
            #print(type)
            if type=="major-release" or type=="minor-release":
                 majorRelease.append(r)

        return majorRelease


    def extractTypeOfRelease(self,releaseName):

            toReplace = releaseName
            dotCount = len(toReplace) - len(toReplace.replace(".", ""))
            underscoreCount = len(toReplace) - len(toReplace.replace("_", ""))

            if (releaseName.lower().find("rc")!=-1):
                return "release-candidate"
            else:
                if (dotCount == 2):
                    numbers = releaseName.split("\\.")
                    size = len(numbers)

                    if numbers[size - 1]=="0":	 #x.x.0
                        if numbers[size-2]=="0":	 #x.0.0
                            return "major-release"
                        else:
                            return "minor-release"

                    else:
                        return "release-candidate"

                else:
                    if dotCount == 1:
                        if releaseName.endswith("0"):
                            return "major-release"
                        else:
                            return "minor-release"

                    else:
                        if (underscoreCount == 2):
                            numbers = releaseName.split("_")
                            size = len(numbers)

                            if(numbers[size-1]=="0"):		#x_x_0
                                if(numbers[size-2]=="0"):	#x_0_0
                                    return "major-release"
                                else:
                                    return "minor-release"

                            else:
                                return "release-candidate"

                        else:
                            if (underscoreCount == 1):
                                if releaseName.endswith("0"):
                                    return "major-release"
                                else:
                                    return "minor-release"

                            else:
                                return "release-candidate"



